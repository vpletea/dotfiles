# Starship prompt
eval "$(starship init zsh)"

# MacOS specific config
if [[ $(uname -m) == 'arm64' ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/Users/valentin.pletea/.rd/bin:$PATH"
    # SSH agent setup
    launchctl stop com.openssh.ssh-agent
    eval "$(ssh-agent -s)" > /dev/null
    ssh-add -q ~/.ssh/id_ed25519_sk_rk_Yubikey-USB-C
fi

# Custom plugin manager for zsh
PLUGIN_DIR="$HOME/.config/zsh"
PLUGIN_LOCK="$PLUGIN_DIR/.plugins.lock"
[ -d "$PLUGIN_DIR" ] || mkdir -p "$PLUGIN_DIR"

# Reinstall function
update-plugins() {
  rm -fr "$PLUGIN_DIR"
  echo "Plugin lock removed. Restart your shell to reinstall plugins."
}

# Define plugins: "github_repo name"
plugins=(
"romkatv/zsh-defer"
"zsh-users/zsh-autosuggestions"
"zsh-users/zsh-history-substring-search"
"joshskidmore/zsh-fzf-history-search" # Use ^r for fuzzy search history
"Aloxaf/fzf-tab"
"zsh-users/zsh-syntax-highlighting"
)

# Only install plugins if lock file doesn't exist
if [ ! -f "$PLUGIN_LOCK" ]; then
  for plugin in "${plugins[@]}"; do
    plugin_name=${plugin##*/}
    if [ ! -d "$PLUGIN_DIR/$plugin_name" ]; then
      git clone --quiet "https://github.com/$plugin" "$PLUGIN_DIR/$plugin_name" --depth=1
    fi
  done
  date > "$PLUGIN_LOCK"
fi

# Source plugins
source "$PLUGIN_DIR/zsh-defer/zsh-defer.plugin.zsh"

# Defer loading
zsh-defer source "$PLUGIN_DIR/zsh-history-substring-search/zsh-history-substring-search.zsh"
zsh-defer source "$PLUGIN_DIR/zsh-fzf-history-search/zsh-fzf-history-search.plugin.zsh"
zsh-defer source "$PLUGIN_DIR/fzf-tab/fzf-tab.plugin.zsh"
zsh-defer source "$PLUGIN_DIR/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
zsh-defer source "$PLUGIN_DIR/zsh-autosuggestions/zsh-autosuggestions.zsh"

#SSH fix for kitty
export TERM=xterm

# Kitty specific config
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

# Key bindings
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "^[[A" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey "^[[B" history-substring-search-down

# ZSH options
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"
ZSH_AUTOSUGGEST_USE_ASYNC=1
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt glob_dots
unsetopt BEEP


# Case unsesitive cd completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# Combines ls and fzf for cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# Initialize completions with defer
autoload -Uz compinit
if [ "$(date +'%j')" != "$(stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)" ]; then
    zsh-defer compinit
else
    zsh-defer compinit -C
fi


#Aliases
alias cat='bat --theme=zenburn'
alias eza='eza --git --group-directories-first --header '\''--color=auto'\'''
alias grep='grep -n --color'
alias la='eza -a'
alias ll='ls -alh'
alias ls='eza'
alias lt='eza --tree'
alias kc='k3d cluster create -p 80:80@loadbalancer -p 443:443@loadbalancer'
alias kd='k3d cluster delete'
alias code='codium'

# Shell integrations
eval "$(fzf --zsh)"
eval "$(zoxide init --cmd cd zsh)"
eval "$(mise activate zsh)"